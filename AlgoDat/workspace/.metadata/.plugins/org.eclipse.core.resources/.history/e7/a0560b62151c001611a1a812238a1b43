
/**
* this class <code> Picture </code> describes a RGB picture with dimensions width x height.
* Each pixels coulour is represented by an RGBColour
* 
* @author AlgoDat
*
*/

import javax.imageio.*;
import java.io.IOException;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.*;
import java.io.FileInputStream;
import java.io.InputStream;

public class Picture {

    /**
    * A 2d array containing the colours of the individual pixels
    */
    private RGBColor imageMatrix[][];

    /**
    * The width of the image in pixels
    */
    private int width;

    /**
    * height of the image in pixels
    */
    private int height;
    
    /**
     * intitialize a picture by creating a white picture
     */
    public Picture(int width, int height){
        this.height = height;
        this.width = width;
        createWhitePicture();
    }
    /**
     * initialize a picture by opening given file
     * @param picUrl path of *.bmp picture
     */
    public Picture(String picUrl){      
        openAndSetPicture(picUrl);      
    }

    /**
    * intialize a picture by giving an image matrix
    * @param imageMatrix two dimansionar RGBColor array
    */
    public Picture(RGBColor imageMatrix[][]){
        this.width = imageMatrix.length;
        this.height = imageMatrix[0].length;
        this.imageMatrix = imageMatrix;
    }

    /**
     * turns this picture 90 degrees to the right
     *
     */
    public void rot90DegRight(){
    	RGBColor[][] newMatrix = new RGBColor[height][width];
    	
    	/*for (int i = 0; i < height; i++)
    	{
    		for (int j = 0; j < width; j++)
    		{
    			newMatrix[i][j] = imageMatrix[j][i];
    		}
    	}*/
    	for (int i = 0; i < this.width; i++)
    	{
    		for (int j = 0; j < this.height; j++)
    		{
    			newMatrix[i][height - j - 1] = imageMatrix[i][j];
    		}
    	}
    	
    	this.imageMatrix = newMatrix;
    	this.width = imageMatrix.length;
    	this.height = imageMatrix[0].length;
    }
    
    /**
     * turns this picture 180 degrees
     *
     */
    public void rot180Deg(){
    	RGBColor[][] newMatrix = new RGBColor[this.width][this.height;
    	
    	
    	for (int i = 0; i < this.width; i++)
    	{
    		for (int j = 0; j < this.height; j++)
    		{
    			
    		}
    	}
    }
    
    /**
     * finds white pixels and approximates their new color by using the average of neighbour colors
     *
     */
    public void repairPicture(){
    	for (int i = 0; i < width; i++)
    	{
    		for (int j = 0; j < height; j++)
    		{
    			if (imageMatrix[i][j].isWhite())
    			{
    				repairPixel(i, j);
    			}
    		}
    	}
    }
    
    /**
     * Does the pixel repair heavy lifting.
     * @param i
     * @param j
     */
    private void repairPixel(int i, int j)
    {
    	int [] avg = new int[3];
		int numPixelsUsed = 0;
		for (int k = i - 1; k < i + 2; k++)
		{
			for (int l = j - 1; j < l + 2; l++)
			{
				if (isInBounds(k, l) && isNotEqual(i, j, k, l))
				{
					if (!imageMatrix[k][l].isWhite())
					{
					 	addToAverage(avg, imageMatrix[k][l]);
					 	numPixelsUsed++;
					}
				}
			}
		}
		if (numPixelsUsed > 0)
		{
			for (int o = 0; o < 3; o++)
			{
				avg[o] /= numPixelsUsed;
			}
			imageMatrix[i][j].setRGB(avg[0], avg[1], avg[2]);
		}
    }
        
    /**
     * Adds rgb values to an average.
     * @param avg
     * @param rgb
     */
    private void addToAverage(int [] avg, RGBColor rgb)
    {
    	avg[0] += rgb.getRed();
    	avg[1] += rgb.getGreen();
    	avg[2] += rgb.getBlue();
    }
    
    /**
     * Confirms that an index is in bounds.
     * @param l
     * @param k
     * @return
     */
    private boolean isInBounds(int k, int l)
    {
    	if (0 <= k && k < width && 0 <= l && l < height)
    		return true;
    	else
    		return false;
    }
    
    /**
     * Confirms that indices are not equal.
     * @param i
     * @param j
     * @param k
     * @param l
     * @return
     */
    private boolean isNotEqual(int i, int j, int k, int l)
    {
    	if (i != k && j != l)
    		return true;
    	else
    		return false;
    }
    
    /**
     * Creates a completely white picture
     *
     */
    public void createWhitePicture(){
        this.imageMatrix = new RGBColor[this.width][this.height];
        for (int w=0; w< this.width; w++){
            for(int h=0; h< this.height; h++){
                //set this colors in picture
                this.imageMatrix[w][h] = new RGBColor(255, 255, 255);                
            }
        }
    }

    /**
    * DO NOT CHANGE ANYTHING BELOW THIS LINE!
    **/

    // Getters
    
    /**
     * 
     * @return the width of the picture
     */
    public int getWidth(){
        return this.width;
    }

    /**
     * 
     * @return the height of the picture
     */
    public int getHeight(){
        return this.height;
    }

    /**
     * 
     * @return the the picture matrix
     */
    public RGBColor[][] getImageMatrix(){
        return this.imageMatrix;
    }
    
    /**
     * reads an 24-bit(8,8,8) Bitmap and store it into picture-array
     * @param picUrl The url to the pic
     * @return true, if successful else false
     */
    private boolean openAndSetPicture(String picUrl){
         
         BufferedImage pic;
         
         
         try {
             InputStream iS= new FileInputStream(picUrl);
             // get buffer of the picture
             pic = ImageIO.read(iS);    
             
             // get additional picture informations
             this.height = pic.getHeight();
             this.width = pic.getWidth();            
             
             // store rgb colors in picture
             this.imageMatrix = new RGBColor[this.width][this.height];
             ColorModel cm= ColorModel.getRGBdefault();
             for (int w=0; w< this.width; w++){
                 for(int h=0; h< this.height; h++){
                     
                     // read out every RGBcolor
                     int pixel = pic.getRGB(w, h);
                     int rVal= cm.getRed(pixel);
                     int gVal= cm.getGreen(pixel);
                     int bVal= cm.getBlue(pixel);
                     
                     //set this colors in picture
                     this.imageMatrix[w][h] = new RGBColor(rVal, gVal, bVal);                
                 }
             }
             return true;
             
             
         }catch (IOException e) {
             e.printStackTrace();       
         }
         return false;
         
    }
    
    public BufferedImage getImage(){
        BufferedImage buf = new BufferedImage(this.width, this.height, BufferedImage.TYPE_INT_RGB);
        for(int w=0; w<this.width; w++){
            for(int h=0; h<this.height; h++){
                int red= this.imageMatrix[w][h].getRed();
                int blue= this.imageMatrix[w][h].getBlue();
                int green= this.imageMatrix[w][h].getGreen();
                int rgbVal= new Color(red, green, blue).getRGB();
                buf.setRGB(w, h, rgbVal);
            }
    }
    
        return buf;
    }


    
    
}

